// tslint:disable
/**
 * yhxk-api
 * Application related APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import { FormStore, IFormField, FormType } from "common/FormStore";
import { Field } from "common/Field";
import * as _ from "lodash";
/**
 *
 * @export
 * @interface CorpUserResourceDto
 */
export interface CorpUserResourceDto {
  /**
   *
   * @type {number}
   * @memberof CorpUserResourceDto
   */
  userId?: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CorpUserResourceDto
   */
  resourceIds?: Array<number>;
  /**
   *
   * @type {Array<number>}
   * @memberof CorpUserResourceDto
   */
  roles?: Array<number>;
}

export function CorpUserResourceDtoFromJSON(json: any): CorpUserResourceDto {
  return {
    userId: !exists(json, "userId") ? undefined : json["userId"],
    resourceIds: !exists(json, "resourceIds") ? undefined : json["resourceIds"],
    roles: !exists(json, "roles") ? undefined : json["roles"],
  };
}

export function CorpUserResourceDtoToJSON(value?: CorpUserResourceDto): any {
  if (value === undefined) {
    return undefined;
  }
  return {
    userId: value.userId,
    resourceIds: value.resourceIds,
    roles: value.roles,
  };
}

export type CorpUserResourceDtoFormKeys = keyof CorpUserResourceDto;
export type CorpUserResourceDtoNewType = { [P in CorpUserResourceDtoFormKeys]: CorpUserResourceDto[P] };
export type CorpUserResourceDtoFormType = FormType<CorpUserResourceDtoNewType>;

export function CorpUserResourceDtoFormDefault(): IFormField<CorpUserResourceDto> {
  return {
    userId: { value: void 0 },
    resourceIds: { value: void 0 },
    roles: { value: void 0 },
  } as any;
}

export function createCorpUserResourceDtoFormStore<T>(
  field?: IFormField<T>,
): CorpUserResourceDtoFormType & FormType<T> {
  const fields: IFormField<T & CorpUserResourceDto> = _.merge<any, any>(CorpUserResourceDtoFormDefault(), field);
  return new FormStore(_.mapValues<IFormField<T & CorpUserResourceDto>, Field<any>>(fields, (item: any) => {
    if (typeof item!!.rules !== "undefined") {
      return new Field(item).validators(...item.rules);
    }
    return new Field(item);
  }) as any);
}
