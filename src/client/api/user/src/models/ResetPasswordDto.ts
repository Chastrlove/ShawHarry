// tslint:disable
/**
 * yhxk-api
 * Application related APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import { FormStore, IFormField, FormType } from "common/FormStore";
import { Field } from "common/Field";
import * as _ from "lodash";
/**
 *
 * @export
 * @interface ResetPasswordDto
 */
export interface ResetPasswordDto {
  /**
   *
   * @type {string}
   * @memberof ResetPasswordDto
   */
  phone?: string;
  /**
   * 原密码
   * @type {string}
   * @memberof ResetPasswordDto
   */
  oldPassword?: string;
  /**
   * 新密码
   * @type {string}
   * @memberof ResetPasswordDto
   */
  newPassword?: string;
  /**
   * 密码确认
   * @type {string}
   * @memberof ResetPasswordDto
   */
  confirmPassword?: string;
}

export function ResetPasswordDtoFromJSON(json: any): ResetPasswordDto {
  return {
    phone: !exists(json, "phone") ? undefined : json["phone"],
    oldPassword: !exists(json, "oldPassword") ? undefined : json["oldPassword"],
    newPassword: !exists(json, "newPassword") ? undefined : json["newPassword"],
    confirmPassword: !exists(json, "confirmPassword") ? undefined : json["confirmPassword"],
  };
}

export function ResetPasswordDtoToJSON(value?: ResetPasswordDto): any {
  if (value === undefined) {
    return undefined;
  }
  return {
    phone: value.phone,
    oldPassword: value.oldPassword,
    newPassword: value.newPassword,
    confirmPassword: value.confirmPassword,
  };
}

export type ResetPasswordDtoFormKeys = keyof ResetPasswordDto;
export type ResetPasswordDtoNewType = { [P in ResetPasswordDtoFormKeys]: ResetPasswordDto[P] };
export type ResetPasswordDtoFormType = FormType<ResetPasswordDtoNewType>;

export function ResetPasswordDtoFormDefault(): IFormField<ResetPasswordDto> {
  return {
    phone: { value: void 0 },
    oldPassword: { value: void 0 },
    newPassword: { value: void 0 },
    confirmPassword: { value: void 0 },
  } as any;
}

export function createResetPasswordDtoFormStore<T>(field?: IFormField<T>): ResetPasswordDtoFormType & FormType<T> {
  const fields: IFormField<T & ResetPasswordDto> = _.merge<any, any>(ResetPasswordDtoFormDefault(), field);
  return new FormStore(_.mapValues<IFormField<T & ResetPasswordDto>, Field<any>>(fields, (item: any) => {
    if (typeof item!!.rules !== "undefined") {
      return new Field(item).validators(...item.rules);
    }
    return new Field(item);
  }) as any);
}
