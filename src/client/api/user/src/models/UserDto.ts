// tslint:disable
/**
 * yhxk-api
 * Application related APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import { FormStore, IFormField, FormType } from "common/FormStore";
import { Field } from "common/Field";
import * as _ from "lodash";
/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
  /**
   * 用户名称
   * @type {string}
   * @memberof UserDto
   */
  realName?: string;
  /**
   * 角色
   * @type {string}
   * @memberof UserDto
   */
  role?: UserDtoRoleEnum;
  /**
   * 密码
   * @type {string}
   * @memberof UserDto
   */
  password?: string;
  /**
   * 密码确认
   * @type {string}
   * @memberof UserDto
   */
  confirmPassword?: string;
  /**
   * 手机号
   * @type {string}
   * @memberof UserDto
   */
  mobile?: string;
  /**
   * 短信验证码
   * @type {string}
   * @memberof UserDto
   */
  msgCode?: string;
  /**
   * 身份证号
   * @type {string}
   * @memberof UserDto
   */
  idCard?: string;
}

export function UserDtoFromJSON(json: any): UserDto {
  return {
    realName: !exists(json, "realName") ? undefined : json["realName"],
    role: !exists(json, "role") ? undefined : json["role"],
    password: !exists(json, "password") ? undefined : json["password"],
    confirmPassword: !exists(json, "confirmPassword") ? undefined : json["confirmPassword"],
    mobile: !exists(json, "mobile") ? undefined : json["mobile"],
    msgCode: !exists(json, "msgCode") ? undefined : json["msgCode"],
    idCard: !exists(json, "idCard") ? undefined : json["idCard"],
  };
}

export function UserDtoToJSON(value?: UserDto): any {
  if (value === undefined) {
    return undefined;
  }
  return {
    realName: value.realName,
    role: value.role,
    password: value.password,
    confirmPassword: value.confirmPassword,
    mobile: value.mobile,
    msgCode: value.msgCode,
    idCard: value.idCard,
  };
}

/**
 * @export
 * @enum {string}
 */
export enum UserDtoRoleEnum {
  _1 = "1",
  _2 = "2",
  _3 = "3",
}

export type UserDtoFormKeys = keyof UserDto;
export type UserDtoNewType = { [P in UserDtoFormKeys]: UserDto[P] };
export type UserDtoFormType = FormType<UserDtoNewType>;

export function UserDtoFormDefault(): IFormField<UserDto> {
  return {
    realName: { value: void 0 },
    role: { value: void 0 },
    password: { value: void 0 },
    confirmPassword: { value: void 0 },
    mobile: { value: void 0 },
    msgCode: { value: void 0 },
    idCard: { value: void 0 },
  } as any;
}

export function createUserDtoFormStore<T>(field?: IFormField<T>): UserDtoFormType & FormType<T> {
  const fields: IFormField<T & UserDto> = _.merge<any, any>(UserDtoFormDefault(), field);
  return new FormStore(_.mapValues<IFormField<T & UserDto>, Field<any>>(fields, (item: any) => {
    if (typeof item!!.rules !== "undefined") {
      return new Field(item).validators(...item.rules);
    }
    return new Field(item);
  }) as any);
}
