// tslint:disable
/**
 * yhxk-api
 * Application related APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  CorpUserResourceDto,
  CorpUserResourceDtoFromJSON,
  CorpUserResourceDtoToJSON,
  CorpUserVo,
  CorpUserVoFromJSON,
  CorpUserVoToJSON,
  ResetPasswordDto,
  ResetPasswordDtoFromJSON,
  ResetPasswordDtoToJSON,
  SysParamVo,
  SysParamVoFromJSON,
  SysParamVoToJSON,
  UserDetailVo,
  UserDetailVoFromJSON,
  UserDetailVoToJSON,
  UserDto,
  UserDtoFromJSON,
  UserDtoToJSON,
} from "../models";

export interface CreateUserRequest {
  userDto: UserDto;
}

export interface DistributeResourceRequest {
  dto?: CorpUserResourceDto;
}

export interface ResetPasswordRequest {
  resetPasswordDto: ResetPasswordDto;
}

export interface StatusChangeRequest {
  userVo: CorpUserVo;
}

export interface UserDetailRequest {
  userId: number;
}

/**
 * no description
 */
export class UserApi extends runtime.BaseAPI {
  /**
   * 用户管理-添加用户
   */
  async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<number>> {
    if (requestParameters.userDto === null || requestParameters.userDto === undefined) {
      throw new runtime.RequiredError(
        "userDto",
        "Required parameter requestParameters.userDto was null or undefined when calling createUser.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/user/create`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: UserDtoToJSON(requestParameters.userDto),
    });

    return new runtime.TextApiResponse(response);
  }

  /**
   * 用户管理-添加用户
   */
  async createUser(requestParameters: CreateUserRequest): Promise<number> {
    const response = await this.createUserRaw(requestParameters);
    return await response.value();
  }

  /**
   * 用户授权
   */
  async distributeResourceRaw(requestParameters: DistributeResourceRequest): Promise<runtime.ApiResponse<void>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/user/resource`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: CorpUserResourceDtoToJSON(requestParameters.dto),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 用户授权
   */
  async distributeResource(requestParameters: DistributeResourceRequest): Promise<void> {
    await this.distributeResourceRaw(requestParameters);
  }

  /**
   * 管理用户列表
   */
  async listUserRaw(): Promise<runtime.ApiResponse<Array<CorpUserVo>>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/user/list`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CorpUserVoFromJSON));
  }

  /**
   * 管理用户列表
   */
  async listUser(): Promise<Array<CorpUserVo>> {
    const response = await this.listUserRaw();
    return await response.value();
  }

  /**
   * 密码重置
   */
  async resetPasswordRaw(requestParameters: ResetPasswordRequest): Promise<runtime.ApiResponse<boolean>> {
    if (requestParameters.resetPasswordDto === null || requestParameters.resetPasswordDto === undefined) {
      throw new runtime.RequiredError(
        "resetPasswordDto",
        "Required parameter requestParameters.resetPasswordDto was null or undefined when calling resetPassword.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/user/reset/password`,
      method: "PUT",
      headers: headerParameters,
      query: queryParameters,
      body: ResetPasswordDtoToJSON(requestParameters.resetPasswordDto),
    });

    return new runtime.TextApiResponse(response);
  }

  /**
   * 密码重置
   */
  async resetPassword(requestParameters: ResetPasswordRequest): Promise<boolean> {
    const response = await this.resetPasswordRaw(requestParameters);
    return await response.value();
  }

  /**
   * 企业用户状态变更
   */
  async statusChangeRaw(requestParameters: StatusChangeRequest): Promise<runtime.ApiResponse<number>> {
    if (requestParameters.userVo === null || requestParameters.userVo === undefined) {
      throw new runtime.RequiredError(
        "userVo",
        "Required parameter requestParameters.userVo was null or undefined when calling statusChange.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/user/status`,
      method: "PUT",
      headers: headerParameters,
      query: queryParameters,
      body: CorpUserVoToJSON(requestParameters.userVo),
    });

    return new runtime.TextApiResponse(response);
  }

  /**
   * 企业用户状态变更
   */
  async statusChange(requestParameters: StatusChangeRequest): Promise<number> {
    const response = await this.statusChangeRaw(requestParameters);
    return await response.value();
  }

  /**
   * 用户所在企业列表
   */
  async userCorpsRaw(): Promise<runtime.ApiResponse<Array<SysParamVo>>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/user/corps`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SysParamVoFromJSON));
  }

  /**
   * 用户所在企业列表
   */
  async userCorps(): Promise<Array<SysParamVo>> {
    const response = await this.userCorpsRaw();
    return await response.value();
  }

  /**
   * 查看详情
   */
  async userDetailRaw(requestParameters: UserDetailRequest): Promise<runtime.ApiResponse<UserDetailVo>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        "userId",
        "Required parameter requestParameters.userId was null or undefined when calling userDetail.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/user/detail/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailVoFromJSON(jsonValue));
  }

  /**
   * 查看详情
   */
  async userDetail(requestParameters: UserDetailRequest): Promise<UserDetailVo> {
    const response = await this.userDetailRaw(requestParameters);
    return await response.value();
  }
}
