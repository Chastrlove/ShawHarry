// tslint:disable
/**
 * 前端服务
 * 服务API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import jsCookie from "js-cookie";

import {
  AddBankAccountReqDto,
  AddBankAccountReqDtoFromJSON,
  AddBankAccountReqDtoToJSON,
  BankAccountVo,
  BankAccountVoFromJSON,
  BankAccountVoToJSON,
} from "../models";

declare interface BaseResponse<T = any> {
  status: number;
  success: boolean;
  result: T;
  totalPage?: number;
  totalCount?: number;
  pageSize?: number;
  currentPage: number;
  header: Headers;
}
declare interface RequestExtraOptions {
  alertMessage?: boolean;
  headers?: { [key: string]: any };
  [key: string]: any;
}

async function createResult<T = any>(response: runtime.ApiResponse<T>) {
  const { status, headers } = response.raw;
  const value = await response.value();

  if (headers.has("Authorization")) {
    jsCookie.set("Authorization", headers.get("Authorization") || "");
  }

  return {
    result: value,
    success: status >= 200 && status < 300,
    header: headers,
    status,
    totalPage: Number(headers.get("X-Total-Page")),
    totalCount: Number(headers.get("X-Total-Count")),
    pageSize: Number(headers.get("X-Page-Size")),
    currentPage: Number(headers.get("X-Current-Page")),
  };
}

export interface CreateBankAccountUsingPOSTRequest {
  accountReqDto: AddBankAccountReqDto;
}

export interface ExportCorpBankAccountsUsingGETRequest {
  corpCode: string;
}

export interface GetCorpBankAccountsPageUsingGETRequest {
  corpCode: string;
}

export interface GetCorpBankAccountsUsingGETRequest {
  corpCode: string;
}

export interface SetBankAccountStatusUsingPUTRequest {
  bankAccountId: number;
  status: number;
}

export interface SetDefaultBankAccountUsingPUTRequest {
  bankAccountId: number;
}

/**
 * no description
 */
export class BankAccountApi extends runtime.BaseAPI {
  /**
   * 新建企业银行账户
   * 新建企业银行账户
   */
  async createBankAccountUsingPOSTRaw(
    requestParameters: CreateBankAccountUsingPOSTRequest,
    options: RequestExtraOptions = {},
  ): Promise<runtime.ApiResponse<boolean>> {
    if (requestParameters.accountReqDto === null || requestParameters.accountReqDto === undefined) {
      throw new runtime.RequiredError(
        "accountReqDto",
        "Required parameter requestParameters.accountReqDto was null or undefined when calling createBankAccountUsingPOST.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      if (typeof this.configuration.accessToken === "function") {
        headerParameters["Authorization"] = this.configuration.accessToken("", []);
      } else {
        headerParameters["Authorization"] = this.configuration.accessToken;
      }
    }

    const response = await this.request(
      {
        path: `/bankaccount/add`,
        method: "POST",
        headers: { ...headerParameters, ...options.headers },
        query: queryParameters,
        body: AddBankAccountReqDtoToJSON(requestParameters.accountReqDto),
      },
      options.alertMessage,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * 新建企业银行账户
   * 新建企业银行账户
   */
  async createBankAccountUsingPOST(
    requestParameters: CreateBankAccountUsingPOSTRequest,
    options?: RequestExtraOptions,
  ): Promise<BaseResponse<boolean>> {
    const response = await this.createBankAccountUsingPOSTRaw(requestParameters, options);
    return createResult(response);
  }

  /**
   * 导出企业的银行账户列表excel
   * 银行账户列表导出
   */
  async exportCorpBankAccountsUsingGETRaw(
    requestParameters: ExportCorpBankAccountsUsingGETRequest,
    options: RequestExtraOptions = {},
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
      throw new runtime.RequiredError(
        "corpCode",
        "Required parameter requestParameters.corpCode was null or undefined when calling exportCorpBankAccountsUsingGET.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.corpCode !== undefined) {
      queryParameters["corpCode"] = requestParameters.corpCode;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      if (typeof this.configuration.accessToken === "function") {
        headerParameters["Authorization"] = this.configuration.accessToken("", []);
      } else {
        headerParameters["Authorization"] = this.configuration.accessToken;
      }
    }

    const response = await this.request(
      {
        path: `/bankaccount/export`,
        method: "GET",
        headers: { ...headerParameters, ...options.headers },
        query: queryParameters,
      },
      options.alertMessage,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * 导出企业的银行账户列表excel
   * 银行账户列表导出
   */
  async exportCorpBankAccountsUsingGET(
    requestParameters: ExportCorpBankAccountsUsingGETRequest,
    options?: RequestExtraOptions,
  ): Promise<BaseResponse<string>> {
    const response = await this.exportCorpBankAccountsUsingGETRaw(requestParameters, options);
    return createResult(response);
  }

  /**
   * 获取企业的银行账户列表
   * 银行账户列表
   */
  async getCorpBankAccountsPageUsingGETRaw(
    requestParameters: GetCorpBankAccountsPageUsingGETRequest,
    options: RequestExtraOptions = {},
  ): Promise<runtime.ApiResponse<Array<BankAccountVo>>> {
    if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
      throw new runtime.RequiredError(
        "corpCode",
        "Required parameter requestParameters.corpCode was null or undefined when calling getCorpBankAccountsPageUsingGET.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.corpCode !== undefined) {
      queryParameters["corpCode"] = requestParameters.corpCode;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      if (typeof this.configuration.accessToken === "function") {
        headerParameters["Authorization"] = this.configuration.accessToken("", []);
      } else {
        headerParameters["Authorization"] = this.configuration.accessToken;
      }
    }

    const response = await this.request(
      {
        path: `/bankaccount/page`,
        method: "GET",
        headers: { ...headerParameters, ...options.headers },
        query: queryParameters,
      },
      options.alertMessage,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BankAccountVoFromJSON));
  }

  /**
   * 获取企业的银行账户列表
   * 银行账户列表
   */
  async getCorpBankAccountsPageUsingGET(
    requestParameters: GetCorpBankAccountsPageUsingGETRequest,
    options?: RequestExtraOptions,
  ): Promise<BaseResponse<Array<BankAccountVo>>> {
    const response = await this.getCorpBankAccountsPageUsingGETRaw(requestParameters, options);
    return createResult(response);
  }

  /**
   * 获取企业的银行账户列表
   * 银行账户列表
   */
  async getCorpBankAccountsUsingGETRaw(
    requestParameters: GetCorpBankAccountsUsingGETRequest,
    options: RequestExtraOptions = {},
  ): Promise<runtime.ApiResponse<Array<BankAccountVo>>> {
    if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
      throw new runtime.RequiredError(
        "corpCode",
        "Required parameter requestParameters.corpCode was null or undefined when calling getCorpBankAccountsUsingGET.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.corpCode !== undefined) {
      queryParameters["corpCode"] = requestParameters.corpCode;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      if (typeof this.configuration.accessToken === "function") {
        headerParameters["Authorization"] = this.configuration.accessToken("", []);
      } else {
        headerParameters["Authorization"] = this.configuration.accessToken;
      }
    }

    const response = await this.request(
      {
        path: `/bankaccount/list`,
        method: "GET",
        headers: { ...headerParameters, ...options.headers },
        query: queryParameters,
      },
      options.alertMessage,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BankAccountVoFromJSON));
  }

  /**
   * 获取企业的银行账户列表
   * 银行账户列表
   */
  async getCorpBankAccountsUsingGET(
    requestParameters: GetCorpBankAccountsUsingGETRequest,
    options?: RequestExtraOptions,
  ): Promise<BaseResponse<Array<BankAccountVo>>> {
    const response = await this.getCorpBankAccountsUsingGETRaw(requestParameters, options);
    return createResult(response);
  }

  /**
   * 启用/禁用银行账户
   */
  async setBankAccountStatusUsingPUTRaw(
    requestParameters: SetBankAccountStatusUsingPUTRequest,
    options: RequestExtraOptions = {},
  ): Promise<runtime.ApiResponse<boolean>> {
    if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
      throw new runtime.RequiredError(
        "bankAccountId",
        "Required parameter requestParameters.bankAccountId was null or undefined when calling setBankAccountStatusUsingPUT.",
      );
    }

    if (requestParameters.status === null || requestParameters.status === undefined) {
      throw new runtime.RequiredError(
        "status",
        "Required parameter requestParameters.status was null or undefined when calling setBankAccountStatusUsingPUT.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      if (typeof this.configuration.accessToken === "function") {
        headerParameters["Authorization"] = this.configuration.accessToken("", []);
      } else {
        headerParameters["Authorization"] = this.configuration.accessToken;
      }
    }

    const response = await this.request(
      {
        path: `/bankaccount/{bankAccountId}/status/{status}`
          .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId)))
          .replace(`{${"status"}}`, encodeURIComponent(String(requestParameters.status))),
        method: "PUT",
        headers: { ...headerParameters, ...options.headers },
        query: queryParameters,
      },
      options.alertMessage,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * 启用/禁用银行账户
   */
  async setBankAccountStatusUsingPUT(
    requestParameters: SetBankAccountStatusUsingPUTRequest,
    options?: RequestExtraOptions,
  ): Promise<BaseResponse<boolean>> {
    const response = await this.setBankAccountStatusUsingPUTRaw(requestParameters, options);
    return createResult(response);
  }

  /**
   * 设置企业的默认账户
   */
  async setDefaultBankAccountUsingPUTRaw(
    requestParameters: SetDefaultBankAccountUsingPUTRequest,
    options: RequestExtraOptions = {},
  ): Promise<runtime.ApiResponse<boolean>> {
    if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
      throw new runtime.RequiredError(
        "bankAccountId",
        "Required parameter requestParameters.bankAccountId was null or undefined when calling setDefaultBankAccountUsingPUT.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      if (typeof this.configuration.accessToken === "function") {
        headerParameters["Authorization"] = this.configuration.accessToken("", []);
      } else {
        headerParameters["Authorization"] = this.configuration.accessToken;
      }
    }

    const response = await this.request(
      {
        path: `/bankaccount/default/{bankAccountId}`.replace(
          `{${"bankAccountId"}}`,
          encodeURIComponent(String(requestParameters.bankAccountId)),
        ),
        method: "PUT",
        headers: { ...headerParameters, ...options.headers },
        query: queryParameters,
      },
      options.alertMessage,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * 设置企业的默认账户
   */
  async setDefaultBankAccountUsingPUT(
    requestParameters: SetDefaultBankAccountUsingPUTRequest,
    options?: RequestExtraOptions,
  ): Promise<BaseResponse<boolean>> {
    const response = await this.setDefaultBankAccountUsingPUTRaw(requestParameters, options);
    return createResult(response);
  }
}
