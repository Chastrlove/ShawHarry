// tslint:disable
/**
 * 前端服务
 * 服务API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import { FormStore, IFormField, FormType } from "common/FormStore";
import { Field } from "common/Field";
import * as _ from "lodash";
/**
 * 新增企业账户Dto
 * @export
 * @interface AddBankAccountReqDto
 */
export interface AddBankAccountReqDto {
  /**
   * 账户名称
   * @type {string}
   * @memberof AddBankAccountReqDto
   */
  accountName: string;
  /**
   * 账户号码
   * @type {string}
   * @memberof AddBankAccountReqDto
   */
  accountNo: string;
  /**
   * 银行Id
   * @type {number}
   * @memberof AddBankAccountReqDto
   */
  bankId: number;
  /**
   * 银行名称
   * @type {string}
   * @memberof AddBankAccountReqDto
   */
  bankName: string;
  /**
   * 分行Id
   * @type {number}
   * @memberof AddBankAccountReqDto
   */
  branchId: number;
  /**
   * 分行名称
   * @type {string}
   * @memberof AddBankAccountReqDto
   */
  branchName: string;
  /**
   * 市国标码
   * @type {string}
   * @memberof AddBankAccountReqDto
   */
  cityGbCode: string;
  /**
   * 企业代码
   * @type {string}
   * @memberof AddBankAccountReqDto
   */
  corpCode: string;
  /**
   * 省国标码
   * @type {string}
   * @memberof AddBankAccountReqDto
   */
  provinceGbCode: string;
}

export function AddBankAccountReqDtoFromJSON(json: any): AddBankAccountReqDto {
  return {
    accountName: json["accountName"],
    accountNo: json["accountNo"],
    bankId: json["bankId"],
    bankName: json["bankName"],
    branchId: json["branchId"],
    branchName: json["branchName"],
    cityGbCode: json["cityGbCode"],
    corpCode: json["corpCode"],
    provinceGbCode: json["provinceGbCode"],
  };
}

export function AddBankAccountReqDtoToJSON(value?: AddBankAccountReqDto): any {
  if (value === undefined) {
    return undefined;
  }
  return {
    accountName: value.accountName,
    accountNo: value.accountNo,
    bankId: value.bankId,
    bankName: value.bankName,
    branchId: value.branchId,
    branchName: value.branchName,
    cityGbCode: value.cityGbCode,
    corpCode: value.corpCode,
    provinceGbCode: value.provinceGbCode,
  };
}

export type AddBankAccountReqDtoFormKeys = keyof AddBankAccountReqDto;
export type AddBankAccountReqDtoNewType = { [P in AddBankAccountReqDtoFormKeys]: AddBankAccountReqDto[P] };
export type AddBankAccountReqDtoFormType = FormType<AddBankAccountReqDtoNewType>;

export function AddBankAccountReqDtoFormDefault(): IFormField<AddBankAccountReqDto> {
  return {
    accountName: { value: undefined },
    accountNo: { value: undefined },
    bankId: { value: undefined },
    bankName: { value: undefined },
    branchId: { value: undefined },
    branchName: { value: undefined },
    cityGbCode: { value: undefined },
    corpCode: { value: undefined },
    provinceGbCode: { value: undefined },
  } as any;
}

export function createAddBankAccountReqDtoFormStore<T>(
  field?: IFormField<T>,
): AddBankAccountReqDtoFormType & FormType<T> {
  const fields: IFormField<T & AddBankAccountReqDto> = _.merge<any, any>(AddBankAccountReqDtoFormDefault(), field);
  return new FormStore(_.mapValues<IFormField<T & AddBankAccountReqDto>, Field<any>>(fields, (item: any) => {
    if (typeof item!!.rules !== "undefined") {
      return new Field(item).validators(...item.rules);
    }
    return new Field(item);
  }) as any);
}
