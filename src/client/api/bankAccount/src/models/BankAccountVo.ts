// tslint:disable
/**
 * 前端服务
 * 服务API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import { FormStore, IFormField, FormType } from "common/FormStore";
import { Field } from "common/Field";
import * as _ from "lodash";
/**
 *
 * @export
 * @interface BankAccountVo
 */
export interface BankAccountVo {
  /**
   * 银行账户名称
   * @type {string}
   * @memberof BankAccountVo
   */
  accountName?: string;
  /**
   * 银行账号
   * @type {string}
   * @memberof BankAccountVo
   */
  accountNo?: string;
  /**
   * 银行名称
   * @type {string}
   * @memberof BankAccountVo
   */
  bankName?: string;
  /**
   * 支行名称
   * @type {string}
   * @memberof BankAccountVo
   */
  branchName?: string;
  /**
   * 市名称
   * @type {string}
   * @memberof BankAccountVo
   */
  city?: string;
  /**
   * 企业代码
   * @type {string}
   * @memberof BankAccountVo
   */
  corpCode?: string;
  /**
   * 创建时间
   * @type {Date}
   * @memberof BankAccountVo
   */
  createdTime?: Date;
  /**
   * 账户Id
   * @type {number}
   * @memberof BankAccountVo
   */
  id?: number;
  /**
   * 是否默认账户，0不是，1是
   * @type {number}
   * @memberof BankAccountVo
   */
  isDefault?: number;
  /**
   * 省名称
   * @type {string}
   * @memberof BankAccountVo
   */
  province?: string;
  /**
   * 账户状态。1正常，2冻结
   * @type {number}
   * @memberof BankAccountVo
   */
  status?: number;
  /**
   * 账户类型，1.一般结算账号，现在只有1
   * @type {number}
   * @memberof BankAccountVo
   */
  type?: number;
}

export function BankAccountVoFromJSON(json: any): BankAccountVo {
  return {
    accountName: !exists(json, "accountName") ? undefined : json["accountName"],
    accountNo: !exists(json, "accountNo") ? undefined : json["accountNo"],
    bankName: !exists(json, "bankName") ? undefined : json["bankName"],
    branchName: !exists(json, "branchName") ? undefined : json["branchName"],
    city: !exists(json, "city") ? undefined : json["city"],
    corpCode: !exists(json, "corpCode") ? undefined : json["corpCode"],
    createdTime: !exists(json, "createdTime") ? undefined : new Date(json["createdTime"]),
    id: !exists(json, "id") ? undefined : json["id"],
    isDefault: !exists(json, "isDefault") ? undefined : json["isDefault"],
    province: !exists(json, "province") ? undefined : json["province"],
    status: !exists(json, "status") ? undefined : json["status"],
    type: !exists(json, "type") ? undefined : json["type"],
  };
}

export function BankAccountVoToJSON(value?: BankAccountVo): any {
  if (value === undefined) {
    return undefined;
  }
  return {
    accountName: value.accountName,
    accountNo: value.accountNo,
    bankName: value.bankName,
    branchName: value.branchName,
    city: value.city,
    corpCode: value.corpCode,
    createdTime: value.createdTime === undefined ? undefined : value.createdTime.toISOString(),
    id: value.id,
    isDefault: value.isDefault,
    province: value.province,
    status: value.status,
    type: value.type,
  };
}

export type BankAccountVoFormKeys = keyof BankAccountVo;
export type BankAccountVoNewType = { [P in BankAccountVoFormKeys]: BankAccountVo[P] };
export type BankAccountVoFormType = FormType<BankAccountVoNewType>;

export function BankAccountVoFormDefault(): IFormField<BankAccountVo> {
  return {
    accountName: { value: void 0 },
    accountNo: { value: void 0 },
    bankName: { value: void 0 },
    branchName: { value: void 0 },
    city: { value: void 0 },
    corpCode: { value: void 0 },
    createdTime: { value: void 0 },
    id: { value: void 0 },
    isDefault: { value: void 0 },
    province: { value: void 0 },
    status: { value: void 0 },
    type: { value: void 0 },
  } as any;
}

export function createBankAccountVoFormStore<T>(field?: IFormField<T>): BankAccountVoFormType & FormType<T> {
  const fields: IFormField<T & BankAccountVo> = _.merge<any, any>(BankAccountVoFormDefault(), field);
  return new FormStore(_.mapValues<IFormField<T & BankAccountVo>, Field<any>>(fields, (item: any) => {
    if (typeof item!!.rules !== "undefined") {
      return new Field(item).validators(...item.rules);
    }
    return new Field(item);
  }) as any);
}
