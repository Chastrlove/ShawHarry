// tslint:disable
/**
 * yhxk-api
 * Application related APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import { SysParamVo, SysParamVoFromJSON, SysParamVoToJSON } from "../models";

export interface GetAreaRequest {
  dict: GetAreaDictEnum;
  pValue?: string;
}

export interface GetBankBranchRequest {
  bankCode: string;
  cityCode: string;
}

/**
 * no description
 */
export class SysParamApi extends runtime.BaseAPI {
  /**
   * 地区列表查询
   * 地区列表查询
   */
  async getAreaRaw(requestParameters: GetAreaRequest): Promise<runtime.ApiResponse<Array<SysParamVo>>> {
    if (requestParameters.dict === null || requestParameters.dict === undefined) {
      throw new runtime.RequiredError(
        "dict",
        "Required parameter requestParameters.dict was null or undefined when calling getArea.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.dict !== undefined) {
      queryParameters["dict"] = requestParameters.dict;
    }

    if (requestParameters.pValue !== undefined) {
      queryParameters["pValue"] = requestParameters.pValue;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/sys/area`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SysParamVoFromJSON));
  }

  /**
   * 地区列表查询
   * 地区列表查询
   */
  async getArea(requestParameters: GetAreaRequest): Promise<Array<SysParamVo>> {
    const response = await this.getAreaRaw(requestParameters);
    return await response.value();
  }

  /**
   * 银行列表查询
   * 银行列表查询
   */
  async getBankRaw(): Promise<runtime.ApiResponse<Array<SysParamVo>>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/sys/bank`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SysParamVoFromJSON));
  }

  /**
   * 银行列表查询
   * 银行列表查询
   */
  async getBank(): Promise<Array<SysParamVo>> {
    const response = await this.getBankRaw();
    return await response.value();
  }

  /**
   * 银行支行列表查询
   * 银行支行列表查询
   */
  async getBankBranchRaw(requestParameters: GetBankBranchRequest): Promise<runtime.ApiResponse<Array<SysParamVo>>> {
    if (requestParameters.bankCode === null || requestParameters.bankCode === undefined) {
      throw new runtime.RequiredError(
        "bankCode",
        "Required parameter requestParameters.bankCode was null or undefined when calling getBankBranch.",
      );
    }

    if (requestParameters.cityCode === null || requestParameters.cityCode === undefined) {
      throw new runtime.RequiredError(
        "cityCode",
        "Required parameter requestParameters.cityCode was null or undefined when calling getBankBranch.",
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/sys/{bankCode}/{cityCode}`
        .replace(`{${"bankCode"}}`, encodeURIComponent(String(requestParameters.bankCode)))
        .replace(`{${"cityCode"}}`, encodeURIComponent(String(requestParameters.cityCode))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SysParamVoFromJSON));
  }

  /**
   * 银行支行列表查询
   * 银行支行列表查询
   */
  async getBankBranch(requestParameters: GetBankBranchRequest): Promise<Array<SysParamVo>> {
    const response = await this.getBankBranchRaw(requestParameters);
    return await response.value();
  }
}

/**
 * @export
 * @enum {string}
 */
export enum GetAreaDictEnum {
  _1 = "1",
  _2 = "2",
  _3 = "3",
}
