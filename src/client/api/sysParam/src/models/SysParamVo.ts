// tslint:disable
/**
 * yhxk-api
 * Application related APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import { FormStore, IFormField, FormType } from "common/FormStore";
import { Field } from "common/Field";
import * as _ from "lodash";
/**
 *
 * @export
 * @interface SysParamVo
 */
export interface SysParamVo {
  /**
   * 参数查询key值
   * @type {string}
   * @memberof SysParamVo
   */
  pkey?: string;
  /**
   * 参数值
   * @type {string}
   * @memberof SysParamVo
   */
  pvalue?: string;
  /**
   * 参数显示值
   * @type {string}
   * @memberof SysParamVo
   */
  pdesc?: string;
  /**
   * 参数父级值
   * @type {string}
   * @memberof SysParamVo
   */
  ppvalue?: string;
}

export function SysParamVoFromJSON(json: any): SysParamVo {
  return {
    pkey: !exists(json, "pkey") ? undefined : json["pkey"],
    pvalue: !exists(json, "pvalue") ? undefined : json["pvalue"],
    pdesc: !exists(json, "pdesc") ? undefined : json["pdesc"],
    ppvalue: !exists(json, "ppvalue") ? undefined : json["ppvalue"],
  };
}

export function SysParamVoToJSON(value?: SysParamVo): any {
  if (value === undefined) {
    return undefined;
  }
  return {
    pkey: value.pkey,
    pvalue: value.pvalue,
    pdesc: value.pdesc,
    ppvalue: value.ppvalue,
  };
}

export type SysParamVoFormKeys = keyof SysParamVo;
export type SysParamVoNewType = { [P in SysParamVoFormKeys]: SysParamVo[P] };
export type SysParamVoFormType = FormType<SysParamVoNewType>;

export function SysParamVoFormDefault(): IFormField<SysParamVo> {
  return {
    pkey: { value: void 0 },
    pvalue: { value: void 0 },
    pdesc: { value: void 0 },
    ppvalue: { value: void 0 },
  } as any;
}

export function createSysParamVoFormStore<T>(field?: IFormField<T>): SysParamVoFormType & FormType<T> {
  const fields: IFormField<T & SysParamVo> = _.merge<any, any>(SysParamVoFormDefault(), field);
  return new FormStore(_.mapValues<IFormField<T & SysParamVo>, Field<any>>(fields, (item: any) => {
    if (typeof item!!.rules !== "undefined") {
      return new Field(item).validators(...item.rules);
    }
    return new Field(item);
  }) as any);
}
