/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * es-cash-flow-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://harry.shaw.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AssetsAccountDailyFlowPagingVo
 */
export interface AssetsAccountDailyFlowPagingVo {
    /**
     * 剩余流水条数
     * @type {number}
     * @memberof AssetsAccountDailyFlowPagingVo
     */
    remainQty?: number;
    /**
     * 
     * @type {Array<DailyCashFlowVo>}
     * @memberof AssetsAccountDailyFlowPagingVo
     */
    dailyCashFlowList?: Array<DailyCashFlowVo>;
}

/**
 * 
 * @export
 * @interface AssetsAccountDailyFlowQueryVo
 */
export interface AssetsAccountDailyFlowQueryVo {
    /**
     * 每页条数
     * @type {number}
     * @memberof AssetsAccountDailyFlowQueryVo
     */
    pageSize?: number;
    /**
     * 
     * @type {CashRecordDetail}
     * @memberof AssetsAccountDailyFlowQueryVo
     */
    lastRecord?: CashRecordDetail;
}

/**
 * 
 * @export
 * @interface AssetsAccountOverviewVo
 */
export interface AssetsAccountOverviewVo {
    /**
     * 账户Id
     * @type {number}
     * @memberof AssetsAccountOverviewVo
     */
    accountId?: number;
    /**
     * 账户名称
     * @type {string}
     * @memberof AssetsAccountOverviewVo
     */
    accountName?: string;
    /**
     * 账户余额
     * @type {number}
     * @memberof AssetsAccountOverviewVo
     */
    balance?: number;
    /**
     * 账户流入金额，从最新一次的余额变动开始计算
     * @type {number}
     * @memberof AssetsAccountOverviewVo
     */
    incomeAmount?: number;
    /**
     * 账户流入金额，从最新一次的余额变动开始计算
     * @type {number}
     * @memberof AssetsAccountOverviewVo
     */
    outcomeAmount?: number;
    /**
     * 剩余流水条数
     * @type {number}
     * @memberof AssetsAccountOverviewVo
     */
    remainQty?: number;
    /**
     * 部分的账户流水，大小由pageSize决定
     * @type {Array<CashAccountVo>}
     * @memberof AssetsAccountOverviewVo
     */
    dailyCashFlowList?: Array<CashAccountVo>;
}

/**
 * 
 * @export
 * @interface AssetsManagerOverviewVo
 */
export interface AssetsManagerOverviewVo {
    /**
     * 净资产
     * @type {number}
     * @memberof AssetsManagerOverviewVo
     */
    netAssetsAmount?: number;
    /**
     * 总资产
     * @type {number}
     * @memberof AssetsManagerOverviewVo
     */
    totalAssetsAmount?: number;
    /**
     * 总负债
     * @type {number}
     * @memberof AssetsManagerOverviewVo
     */
    totalDebtAmount?: number;
    /**
     * 账户类型分组信息
     * @type {Array<CashAccountGroupVo>}
     * @memberof AssetsManagerOverviewVo
     */
    accountGroup?: Array<CashAccountGroupVo>;
}

/**
 * 
 * @export
 * @interface CashAccountGroupVo
 */
export interface CashAccountGroupVo {
    /**
     * 账户类型 0 现金、1 虚拟卡/借记卡、2 虚拟账户
     * @type {number}
     * @memberof CashAccountGroupVo
     */
    type?: number;
    /**
     * 账户类型名称
     * @type {string}
     * @memberof CashAccountGroupVo
     */
    name?: string;
    /**
     * 排序的顺序
     * @type {number}
     * @memberof CashAccountGroupVo
     */
    order?: number;
    /**
     * 净资产金额
     * @type {number}
     * @memberof CashAccountGroupVo
     */
    netBalance?: number;
    /**
     * 改账户类型下所有的账户
     * @type {Array<CashAccountVo>}
     * @memberof CashAccountGroupVo
     */
    accountList?: Array<CashAccountVo>;
}

/**
 * 
 * @export
 * @interface CashAccountVo
 */
export interface CashAccountVo {
    /**
     * 账户Id
     * @type {number}
     * @memberof CashAccountVo
     */
    id?: number;
    /**
     * 账户类型 0 现金、1 虚拟卡/借记卡、2 虚拟账户
     * @type {number}
     * @memberof CashAccountVo
     */
    payType?: number;
    /**
     * 账户名
     * @type {string}
     * @memberof CashAccountVo
     */
    accountName?: string;
    /**
     * 账户余额
     * @type {number}
     * @memberof CashAccountVo
     */
    accountAmount?: number;
    /**
     * 银行Id
     * @type {number}
     * @memberof CashAccountVo
     */
    bankId?: number;
    /**
     * 银行名称
     * @type {string}
     * @memberof CashAccountVo
     */
    bankName?: string;
    /**
     * 银行图标
     * @type {string}
     * @memberof CashAccountVo
     */
    bankFigure?: string;
    /**
     * 支行Id
     * @type {number}
     * @memberof CashAccountVo
     */
    bankBranchId?: number;
    /**
     * 支行名称
     * @type {string}
     * @memberof CashAccountVo
     */
    bankBranchName?: string;
    /**
     * 支行联行号
     * @type {string}
     * @memberof CashAccountVo
     */
    bankBranchCnaps?: string;
    /**
     * 银行卡号
     * @type {string}
     * @memberof CashAccountVo
     */
    bankNo?: string;
    /**
     * 省份代码
     * @type {string}
     * @memberof CashAccountVo
     */
    provinceCode?: string;
    /**
     * 省份名称
     * @type {string}
     * @memberof CashAccountVo
     */
    provinceName?: string;
    /**
     * 城市代码
     * @type {string}
     * @memberof CashAccountVo
     */
    cityCode?: string;
    /**
     * 城市名称
     * @type {string}
     * @memberof CashAccountVo
     */
    cityName?: string;
    /**
     * 是否计入净资产
     * @type {boolean}
     * @memberof CashAccountVo
     */
    allowNetAsset?: boolean;
    /**
     * 备注
     * @type {string}
     * @memberof CashAccountVo
     */
    remark?: string;
}

/**
 * 
 * @export
 * @interface CashMonthListVo
 */
export interface CashMonthListVo {
    /**
     * 是否结束 0否1是
     * @type {number}
     * @memberof CashMonthListVo
     */
    totalEnd?: number;
    /**
     * 
     * @type {Array<CashMonthVo>}
     * @memberof CashMonthListVo
     */
    list?: Array<CashMonthVo>;
}

/**
 * 
 * @export
 * @interface CashMonthQueryVo
 */
export interface CashMonthQueryVo {
    /**
     * 查询年月
     * @type {Date}
     * @memberof CashMonthQueryVo
     */
    startDate?: Date;
    /**
     * 查询条数，默认24条
     * @type {number}
     * @memberof CashMonthQueryVo
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface CashMonthVo
 */
export interface CashMonthVo {
    /**
     * 年月的时间戳
     * @type {number}
     * @memberof CashMonthVo
     */
    month?: number;
    /**
     * 月收入金额
     * @type {number}
     * @memberof CashMonthVo
     */
    debitAmount?: number;
    /**
     * 月支出金额
     * @type {number}
     * @memberof CashMonthVo
     */
    creditAmount?: number;
    /**
     * 月结余：等于【收】减去【支】金额
     * @type {number}
     * @memberof CashMonthVo
     */
    cashSurplus?: number;
}

/**
 * 
 * @export
 * @interface CashParam
 */
export interface CashParam {
    /**
     * 
     * @type {number}
     * @memberof CashParam
     */
    id?: number;
    /**
     * 参数类型 单元 1，tag(分类) 2
     * @type {number}
     * @memberof CashParam
     */
    paramType?: number;
    /**
     * 值
     * @type {string}
     * @memberof CashParam
     */
    paramValue?: string;
    /**
     * 分类是否常用 0 否 1是
     * @type {number}
     * @memberof CashParam
     */
    starTarget?: number;
}

/**
 * 
 * @export
 * @interface CashRecord
 */
export interface CashRecord {
    /**
     * 明细id
     * @type {number}
     * @memberof CashRecord
     */
    id?: number;
    /**
     * 现金流向类别，1:支出 2:收入
     * @type {number}
     * @memberof CashRecord
     */
    direction?: number;
    /**
     * 账户id
     * @type {number}
     * @memberof CashRecord
     */
    accountId?: number;
    /**
     * 类别id
     * @type {number}
     * @memberof CashRecord
     */
    tag?: number;
    /**
     * 金额
     * @type {number}
     * @memberof CashRecord
     */
    amount?: number;
    /**
     * 费用发生日期
     * @type {Date}
     * @memberof CashRecord
     */
    cashDate?: Date;
    /**
     * 备注
     * @type {string}
     * @memberof CashRecord
     */
    remark?: string;
    /**
     * 
     * @type {CashUnit}
     * @memberof CashRecord
     */
    unit?: CashUnit;
}

/**
 * 
 * @export
 * @interface CashRecordDayVo
 */
export interface CashRecordDayVo {
    /**
     * 发生日期时间戳
     * @type {number}
     * @memberof CashRecordDayVo
     */
    cashTimestamp?: number;
    /**
     * 当天收入金额
     * @type {number}
     * @memberof CashRecordDayVo
     */
    debitAmount?: number;
    /**
     * 当天支出金额
     * @type {number}
     * @memberof CashRecordDayVo
     */
    creditAmount?: number;
    /**
     * 
     * @type {Array<CashRecordDetail>}
     * @memberof CashRecordDayVo
     */
    recordList?: Array<CashRecordDetail>;
}

/**
 * 
 * @export
 * @interface CashRecordDetail
 */
export interface CashRecordDetail {
    /**
     * 明细id
     * @type {number}
     * @memberof CashRecordDetail
     */
    id?: number;
    /**
     * 现金流向类别，1:支出 2:收入
     * @type {number}
     * @memberof CashRecordDetail
     */
    direction?: number;
    /**
     * 账户id
     * @type {number}
     * @memberof CashRecordDetail
     */
    accountId?: number;
    /**
     * 账户名
     * @type {string}
     * @memberof CashRecordDetail
     */
    accountName?: string;
    /**
     * 类别id
     * @type {number}
     * @memberof CashRecordDetail
     */
    tag?: number;
    /**
     * 类别值
     * @type {string}
     * @memberof CashRecordDetail
     */
    tagName?: string;
    /**
     * 账户余额
     * @type {number}
     * @memberof CashRecordDetail
     */
    accountAmount?: number;
    /**
     * 金额
     * @type {number}
     * @memberof CashRecordDetail
     */
    amount?: number;
    /**
     * 费用发生日期
     * @type {Date}
     * @memberof CashRecordDetail
     */
    cashDate?: Date;
    /**
     * 备注
     * @type {string}
     * @memberof CashRecordDetail
     */
    remark?: string;
    /**
     * 
     * @type {CashUnit}
     * @memberof CashRecordDetail
     */
    unit?: CashUnit;
    /**
     * 该条流水产生后的账户余额
     * @type {number}
     * @memberof CashRecordDetail
     */
    balance?: number;
    /**
     * 流水排序用的Id
     * @type {number}
     * @memberof CashRecordDetail
     */
    seqId?: number;
}

/**
 * 
 * @export
 * @interface CashRecordQueryVo
 */
export interface CashRecordQueryVo {
    /**
     * 分页单位
     * @type {number}
     * @memberof CashRecordQueryVo
     */
    pageNum?: number;
    /**
     * 分页页码
     * @type {number}
     * @memberof CashRecordQueryVo
     */
    pageSize?: number;
    /**
     * 费用发生日期开始时间
     * @type {Date}
     * @memberof CashRecordQueryVo
     */
    startTime?: Date;
    /**
     * 费用发生日期结束时间
     * @type {Date}
     * @memberof CashRecordQueryVo
     */
    endTime?: Date;
    /**
     * 现金流向类别，1:支出 2:收入
     * @type {number}
     * @memberof CashRecordQueryVo
     */
    direction?: number;
    /**
     * 关键字
     * @type {string}
     * @memberof CashRecordQueryVo
     */
    keyword?: string;
    /**
     * 起始金额
     * @type {number}
     * @memberof CashRecordQueryVo
     */
    startAmount?: number;
    /**
     * 终止金额
     * @type {number}
     * @memberof CashRecordQueryVo
     */
    endAmount?: number;
    /**
     * 账户ids
     * @type {Array<number>}
     * @memberof CashRecordQueryVo
     */
    accountIds?: Array<number>;
    /**
     * 分类ids
     * @type {Array<number>}
     * @memberof CashRecordQueryVo
     */
    tags?: Array<number>;
    /**
     * 部门单元ids
     * @type {Array<number>}
     * @memberof CashRecordQueryVo
     */
    deptIds?: Array<number>;
    /**
     * 员工ids
     * @type {Array<number>}
     * @memberof CashRecordQueryVo
     */
    employeeIds?: Array<number>;
    /**
     * 项目ids
     * @type {Array<number>}
     * @memberof CashRecordQueryVo
     */
    projectIds?: Array<number>;
    /**
     * 自定义ids
     * @type {Array<number>}
     * @memberof CashRecordQueryVo
     */
    userDefineds?: Array<number>;
}

/**
 * 
 * @export
 * @interface CashUnit
 */
export interface CashUnit {
    /**
     * 部门id
     * @type {number}
     * @memberof CashUnit
     */
    deptId?: number;
    /**
     * 部门名称
     * @type {string}
     * @memberof CashUnit
     */
    deptName?: string;
    /**
     * 人员id
     * @type {number}
     * @memberof CashUnit
     */
    employeeId?: number;
    /**
     * 员工名称
     * @type {string}
     * @memberof CashUnit
     */
    employeeName?: string;
    /**
     * 项目id
     * @type {number}
     * @memberof CashUnit
     */
    projectId?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CashUnit
     */
    projectName?: string;
    /**
     * 自定义id
     * @type {number}
     * @memberof CashUnit
     */
    userDefined?: number;
    /**
     * 自定义值
     * @type {string}
     * @memberof CashUnit
     */
    userDefinedValue?: string;
}

/**
 * 
 * @export
 * @interface DailyCashFlowVo
 */
export interface DailyCashFlowVo {
    /**
     * 以天为单位的流水发生日期的时间戳
     * @type {number}
     * @memberof DailyCashFlowVo
     */
    cashTimestamp?: number;
    /**
     * 每天账户的资金净值，每日净值 = 每日收入明细总额 - 每日支出明细总额
     * @type {number}
     * @memberof DailyCashFlowVo
     */
    balance?: number;
    /**
     * 
     * @type {Array<CashRecordDetail>}
     * @memberof DailyCashFlowVo
     */
    cashFlowList?: Array<CashRecordDetail>;
}

/**
 * 
 * @export
 * @interface ErrorResponseVo
 */
export interface ErrorResponseVo {
    /**
     * 
     * @type {number}
     * @memberof ErrorResponseVo
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseVo
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface ExcelImportResultVo
 */
export interface ExcelImportResultVo {
    /**
     * 是否导入成功
     * @type {boolean}
     * @memberof ExcelImportResultVo
     */
    success?: boolean;
    /**
     * 错误类型，1模板错误，2数据错误
     * @type {string}
     * @memberof ExcelImportResultVo
     */
    errorType?: string;
    /**
     * 总的错误信息，例如‘模板错误’
     * @type {string}
     * @memberof ExcelImportResultVo
     */
    errorMessage?: string;
    /**
     * company scope id 公司规模ID
     * @type {Array<string>}
     * @memberof ExcelImportResultVo
     */
    errorDataMessages?: Array<string>;
    /**
     * 导入的数据行数
     * @type {number}
     * @memberof ExcelImportResultVo
     */
    totalRecord?: number;
    /**
     * 错误的数据行数
     * @type {number}
     * @memberof ExcelImportResultVo
     */
    errorRecord?: number;
}


/**
 * CashFlowApi - fetch parameter creator
 * @export
 */
export const CashFlowApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 查询指定年月的资金明细汇总
         * @param {CashMonthQueryVo} cashMonthQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashDateDetail(cashMonthQueryVo: CashMonthQueryVo, options: any = {}): FetchArgs {
            // verify required parameter 'cashMonthQueryVo' is not null or undefined
            if (cashMonthQueryVo === null || cashMonthQueryVo === undefined) {
                throw new RequiredError('cashMonthQueryVo','Required parameter cashMonthQueryVo was null or undefined when calling cashDateDetail.');
            }
            const localVarPath = `/cash/month`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashMonthQueryVo" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashMonthQueryVo || {}) : (cashMonthQueryVo || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询年月的资金明细汇总列表
         * @param {CashMonthQueryVo} cashMonthQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashDateList(cashMonthQueryVo: CashMonthQueryVo, options: any = {}): FetchArgs {
            // verify required parameter 'cashMonthQueryVo' is not null or undefined
            if (cashMonthQueryVo === null || cashMonthQueryVo === undefined) {
                throw new RequiredError('cashMonthQueryVo','Required parameter cashMonthQueryVo was null or undefined when calling cashDateList.');
            }
            const localVarPath = `/cash/month/list`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashMonthQueryVo" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashMonthQueryVo || {}) : (cashMonthQueryVo || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 企业账本参数列表查看
         * @param {number} paramType 参数类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashParamList(paramType: number, options: any = {}): FetchArgs {
            // verify required parameter 'paramType' is not null or undefined
            if (paramType === null || paramType === undefined) {
                throw new RequiredError('paramType','Required parameter paramType was null or undefined when calling cashParamList.');
            }
            const localVarPath = `/cash/param/{paramType}/list`
                .replace(`{${"paramType"}}`, encodeURIComponent(String(paramType)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 资金明细列表
         * @param {CashRecordQueryVo} cashRecordQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashRecordList(cashRecordQueryVo: CashRecordQueryVo, options: any = {}): FetchArgs {
            // verify required parameter 'cashRecordQueryVo' is not null or undefined
            if (cashRecordQueryVo === null || cashRecordQueryVo === undefined) {
                throw new RequiredError('cashRecordQueryVo','Required parameter cashRecordQueryVo was null or undefined when calling cashRecordList.');
            }
            const localVarPath = `/cash/record/list`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashRecordQueryVo" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashRecordQueryVo || {}) : (cashRecordQueryVo || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 资金明细列表导出
         * @param {CashRecordQueryVo} cashRecordQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashRecordListExport(cashRecordQueryVo: CashRecordQueryVo, options: any = {}): FetchArgs {
            // verify required parameter 'cashRecordQueryVo' is not null or undefined
            if (cashRecordQueryVo === null || cashRecordQueryVo === undefined) {
                throw new RequiredError('cashRecordQueryVo','Required parameter cashRecordQueryVo was null or undefined when calling cashRecordListExport.');
            }
            const localVarPath = `/cash/record/export`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashRecordQueryVo" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashRecordQueryVo || {}) : (cashRecordQueryVo || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 企业账本自定义单元、分类新增
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCashParam(cashParam: CashParam, options: any = {}): FetchArgs {
            // verify required parameter 'cashParam' is not null or undefined
            if (cashParam === null || cashParam === undefined) {
                throw new RequiredError('cashParam','Required parameter cashParam was null or undefined when calling createCashParam.');
            }
            const localVarPath = `/cash/param`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashParam" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashParam || {}) : (cashParam || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 资金明细添加
         * @param {CashRecord} cashRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCashRecord(cashRecord: CashRecord, options: any = {}): FetchArgs {
            // verify required parameter 'cashRecord' is not null or undefined
            if (cashRecord === null || cashRecord === undefined) {
                throw new RequiredError('cashRecord','Required parameter cashRecord was null or undefined when calling createCashRecord.');
            }
            const localVarPath = `/cash/record`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashRecord" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashRecord || {}) : (cashRecord || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 保存账户，如果Id不传为新增；Id传了则根据Id进行更新操作
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCashAccount(accountId: number, options: any = {}): FetchArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling deleteCashAccount.');
            }
            const localVarPath = `/assets/account/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 企业账本自定义单元、分类新增
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCashParam(cashParam: CashParam, options: any = {}): FetchArgs {
            // verify required parameter 'cashParam' is not null or undefined
            if (cashParam === null || cashParam === undefined) {
                throw new RequiredError('cashParam','Required parameter cashParam was null or undefined when calling deleteCashParam.');
            }
            const localVarPath = `/cash/param`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashParam" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashParam || {}) : (cashParam || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 资金明细删除
         * @param {CashRecord} cashRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCashRecord(cashRecord: CashRecord, options: any = {}): FetchArgs {
            // verify required parameter 'cashRecord' is not null or undefined
            if (cashRecord === null || cashRecord === undefined) {
                throw new RequiredError('cashRecord','Required parameter cashRecord was null or undefined when calling deleteCashRecord.');
            }
            const localVarPath = `/cash/record`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashRecord" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashRecord || {}) : (cashRecord || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 下载流水导入模版
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadCashTemplate(options: any = {}): FetchArgs {
            const localVarPath = `/cash/record/downloadTemplate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 导入流水
         * @summary 导入流水
         * @param {any} excelFile import cash records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importCashRecords(excelFile: any, options: any = {}): FetchArgs {
            // verify required parameter 'excelFile' is not null or undefined
            if (excelFile === null || excelFile === undefined) {
                throw new RequiredError('excelFile','Required parameter excelFile was null or undefined when calling importCashRecords.');
            }
            const localVarPath = `/cash/record/import`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (excelFile !== undefined) {
                localVarFormParams.set('excelFile', excelFile as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询某个账户的详情以及部分流水
         * @param {number} accountId 账户Id
         * @param {number} [pageSize] 每页的账户流水条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryAccountDetail(accountId: number, pageSize?: number, options: any = {}): FetchArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling queryAccountDetail.');
            }
            const localVarPath = `/assets/account/{accountId}/detail`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询所有账户的详情，用于资产管家首页
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryAllAccountsDetail(options: any = {}): FetchArgs {
            const localVarPath = `/assets/accounts/detail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询某个账户的部分流水，根据入参里的lastRecord.seqId进行查询
         * @param {number} accountId 账户Id
         * @param {AssetsAccountDailyFlowQueryVo} assetsAccountDailyFlowQueryVo 分页查询的参数，当查询下一页的时候，需要把上一次请求的最后一条流水上传
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCashFlow(accountId: number, assetsAccountDailyFlowQueryVo: AssetsAccountDailyFlowQueryVo, options: any = {}): FetchArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling queryCashFlow.');
            }
            // verify required parameter 'assetsAccountDailyFlowQueryVo' is not null or undefined
            if (assetsAccountDailyFlowQueryVo === null || assetsAccountDailyFlowQueryVo === undefined) {
                throw new RequiredError('assetsAccountDailyFlowQueryVo','Required parameter assetsAccountDailyFlowQueryVo was null or undefined when calling queryCashFlow.');
            }
            const localVarPath = `/assets/account/{accountId}/cashflow`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AssetsAccountDailyFlowQueryVo" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(assetsAccountDailyFlowQueryVo || {}) : (assetsAccountDailyFlowQueryVo || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 保存账户，如果Id不传为新增；Id传了则根据Id进行更新操作
         * @param {CashAccountVo} cashAccountVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCashAccount(cashAccountVo: CashAccountVo, options: any = {}): FetchArgs {
            // verify required parameter 'cashAccountVo' is not null or undefined
            if (cashAccountVo === null || cashAccountVo === undefined) {
                throw new RequiredError('cashAccountVo','Required parameter cashAccountVo was null or undefined when calling saveCashAccount.');
            }
            const localVarPath = `/assets/account/save`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashAccountVo" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashAccountVo || {}) : (cashAccountVo || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分类打星标
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStarTarget(cashParam: CashParam, options: any = {}): FetchArgs {
            // verify required parameter 'cashParam' is not null or undefined
            if (cashParam === null || cashParam === undefined) {
                throw new RequiredError('cashParam','Required parameter cashParam was null or undefined when calling tagStarTarget.');
            }
            const localVarPath = `/cash/param/tag/star`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashParam" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashParam || {}) : (cashParam || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新企业资产账户余额
         * @param {CashAccountVo} cashAccountVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCashAccountBalance(cashAccountVo: CashAccountVo, options: any = {}): FetchArgs {
            // verify required parameter 'cashAccountVo' is not null or undefined
            if (cashAccountVo === null || cashAccountVo === undefined) {
                throw new RequiredError('cashAccountVo','Required parameter cashAccountVo was null or undefined when calling updateCashAccountBalance.');
            }
            const localVarPath = `/assets/account/balance/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashAccountVo" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashAccountVo || {}) : (cashAccountVo || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 企业账本自定义单元、分类新增
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCashParam(cashParam: CashParam, options: any = {}): FetchArgs {
            // verify required parameter 'cashParam' is not null or undefined
            if (cashParam === null || cashParam === undefined) {
                throw new RequiredError('cashParam','Required parameter cashParam was null or undefined when calling updateCashParam.');
            }
            const localVarPath = `/cash/param`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashParam" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashParam || {}) : (cashParam || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 资金明细修改
         * @param {CashRecord} cashRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCashRecord(cashRecord: CashRecord, options: any = {}): FetchArgs {
            // verify required parameter 'cashRecord' is not null or undefined
            if (cashRecord === null || cashRecord === undefined) {
                throw new RequiredError('cashRecord','Required parameter cashRecord was null or undefined when calling updateCashRecord.');
            }
            const localVarPath = `/cash/record`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CashRecord" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cashRecord || {}) : (cashRecord || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CashFlowApi - functional programming interface
 * @export
 */
export const CashFlowApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 查询指定年月的资金明细汇总
         * @param {CashMonthQueryVo} cashMonthQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashDateDetail(cashMonthQueryVo: CashMonthQueryVo, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<CashMonthVo>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).cashDateDetail(cashMonthQueryVo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 查询年月的资金明细汇总列表
         * @param {CashMonthQueryVo} cashMonthQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashDateList(cashMonthQueryVo: CashMonthQueryVo, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<CashMonthListVo>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).cashDateList(cashMonthQueryVo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 企业账本参数列表查看
         * @param {number} paramType 参数类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashParamList(paramType: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<Array<CashParam>>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).cashParamList(paramType, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 资金明细列表
         * @param {CashRecordQueryVo} cashRecordQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashRecordList(cashRecordQueryVo: CashRecordQueryVo, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<Array<CashRecordDayVo>>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).cashRecordList(cashRecordQueryVo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 资金明细列表导出
         * @param {CashRecordQueryVo} cashRecordQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashRecordListExport(cashRecordQueryVo: CashRecordQueryVo, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<any>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).cashRecordListExport(cashRecordQueryVo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 企业账本自定义单元、分类新增
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCashParam(cashParam: CashParam, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<number>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).createCashParam(cashParam, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 资金明细添加
         * @param {CashRecord} cashRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCashRecord(cashRecord: CashRecord, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<number>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).createCashRecord(cashRecord, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 保存账户，如果Id不传为新增；Id传了则根据Id进行更新操作
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCashAccount(accountId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<boolean>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).deleteCashAccount(accountId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 企业账本自定义单元、分类新增
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCashParam(cashParam: CashParam, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<number>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).deleteCashParam(cashParam, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 资金明细删除
         * @param {CashRecord} cashRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCashRecord(cashRecord: CashRecord, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<number>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).deleteCashRecord(cashRecord, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 下载流水导入模版
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadCashTemplate(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<any>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).downloadCashTemplate(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 导入流水
         * @summary 导入流水
         * @param {any} excelFile import cash records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importCashRecords(excelFile: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<ExcelImportResultVo>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).importCashRecords(excelFile, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 查询某个账户的详情以及部分流水
         * @param {number} accountId 账户Id
         * @param {number} [pageSize] 每页的账户流水条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryAccountDetail(accountId: number, pageSize?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<AssetsAccountOverviewVo>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).queryAccountDetail(accountId, pageSize, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 查询所有账户的详情，用于资产管家首页
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryAllAccountsDetail(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<AssetsManagerOverviewVo>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).queryAllAccountsDetail(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 分页查询某个账户的部分流水，根据入参里的lastRecord.seqId进行查询
         * @param {number} accountId 账户Id
         * @param {AssetsAccountDailyFlowQueryVo} assetsAccountDailyFlowQueryVo 分页查询的参数，当查询下一页的时候，需要把上一次请求的最后一条流水上传
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCashFlow(accountId: number, assetsAccountDailyFlowQueryVo: AssetsAccountDailyFlowQueryVo, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<AssetsAccountDailyFlowPagingVo>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).queryCashFlow(accountId, assetsAccountDailyFlowQueryVo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 保存账户，如果Id不传为新增；Id传了则根据Id进行更新操作
         * @param {CashAccountVo} cashAccountVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCashAccount(cashAccountVo: CashAccountVo, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<number>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).saveCashAccount(cashAccountVo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 分类打星标
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStarTarget(cashParam: CashParam, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<number>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).tagStarTarget(cashParam, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 更新企业资产账户余额
         * @param {CashAccountVo} cashAccountVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCashAccountBalance(cashAccountVo: CashAccountVo, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<boolean>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).updateCashAccountBalance(cashAccountVo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 企业账本自定义单元、分类新增
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCashParam(cashParam: CashParam, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<number>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).updateCashParam(cashParam, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 资金明细修改
         * @param {CashRecord} cashRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCashRecord(cashRecord: CashRecord, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseResponse<number>> {
            const localVarFetchArgs = CashFlowApiFetchParamCreator(configuration).updateCashRecord(cashRecord, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CashFlowApi - factory interface
 * @export
 */
export const CashFlowApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 查询指定年月的资金明细汇总
         * @param {CashMonthQueryVo} cashMonthQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashDateDetail(cashMonthQueryVo: CashMonthQueryVo, options?: any) {
            return CashFlowApiFp(configuration).cashDateDetail(cashMonthQueryVo, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 查询年月的资金明细汇总列表
         * @param {CashMonthQueryVo} cashMonthQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashDateList(cashMonthQueryVo: CashMonthQueryVo, options?: any) {
            return CashFlowApiFp(configuration).cashDateList(cashMonthQueryVo, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 企业账本参数列表查看
         * @param {number} paramType 参数类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashParamList(paramType: number, options?: any) {
            return CashFlowApiFp(configuration).cashParamList(paramType, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 资金明细列表
         * @param {CashRecordQueryVo} cashRecordQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashRecordList(cashRecordQueryVo: CashRecordQueryVo, options?: any) {
            return CashFlowApiFp(configuration).cashRecordList(cashRecordQueryVo, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 资金明细列表导出
         * @param {CashRecordQueryVo} cashRecordQueryVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashRecordListExport(cashRecordQueryVo: CashRecordQueryVo, options?: any) {
            return CashFlowApiFp(configuration).cashRecordListExport(cashRecordQueryVo, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 企业账本自定义单元、分类新增
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCashParam(cashParam: CashParam, options?: any) {
            return CashFlowApiFp(configuration).createCashParam(cashParam, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 资金明细添加
         * @param {CashRecord} cashRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCashRecord(cashRecord: CashRecord, options?: any) {
            return CashFlowApiFp(configuration).createCashRecord(cashRecord, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 保存账户，如果Id不传为新增；Id传了则根据Id进行更新操作
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCashAccount(accountId: number, options?: any) {
            return CashFlowApiFp(configuration).deleteCashAccount(accountId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 企业账本自定义单元、分类新增
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCashParam(cashParam: CashParam, options?: any) {
            return CashFlowApiFp(configuration).deleteCashParam(cashParam, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 资金明细删除
         * @param {CashRecord} cashRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCashRecord(cashRecord: CashRecord, options?: any) {
            return CashFlowApiFp(configuration).deleteCashRecord(cashRecord, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 下载流水导入模版
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadCashTemplate(options?: any) {
            return CashFlowApiFp(configuration).downloadCashTemplate(options)(fetch, basePath);
        },
        /**
         * 导入流水
         * @summary 导入流水
         * @param {any} excelFile import cash records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importCashRecords(excelFile: any, options?: any) {
            return CashFlowApiFp(configuration).importCashRecords(excelFile, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 查询某个账户的详情以及部分流水
         * @param {number} accountId 账户Id
         * @param {number} [pageSize] 每页的账户流水条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryAccountDetail(accountId: number, pageSize?: number, options?: any) {
            return CashFlowApiFp(configuration).queryAccountDetail(accountId, pageSize, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 查询所有账户的详情，用于资产管家首页
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryAllAccountsDetail(options?: any) {
            return CashFlowApiFp(configuration).queryAllAccountsDetail(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 分页查询某个账户的部分流水，根据入参里的lastRecord.seqId进行查询
         * @param {number} accountId 账户Id
         * @param {AssetsAccountDailyFlowQueryVo} assetsAccountDailyFlowQueryVo 分页查询的参数，当查询下一页的时候，需要把上一次请求的最后一条流水上传
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCashFlow(accountId: number, assetsAccountDailyFlowQueryVo: AssetsAccountDailyFlowQueryVo, options?: any) {
            return CashFlowApiFp(configuration).queryCashFlow(accountId, assetsAccountDailyFlowQueryVo, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 保存账户，如果Id不传为新增；Id传了则根据Id进行更新操作
         * @param {CashAccountVo} cashAccountVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCashAccount(cashAccountVo: CashAccountVo, options?: any) {
            return CashFlowApiFp(configuration).saveCashAccount(cashAccountVo, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 分类打星标
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStarTarget(cashParam: CashParam, options?: any) {
            return CashFlowApiFp(configuration).tagStarTarget(cashParam, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 更新企业资产账户余额
         * @param {CashAccountVo} cashAccountVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCashAccountBalance(cashAccountVo: CashAccountVo, options?: any) {
            return CashFlowApiFp(configuration).updateCashAccountBalance(cashAccountVo, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 企业账本自定义单元、分类新增
         * @param {CashParam} cashParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCashParam(cashParam: CashParam, options?: any) {
            return CashFlowApiFp(configuration).updateCashParam(cashParam, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 资金明细修改
         * @param {CashRecord} cashRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCashRecord(cashRecord: CashRecord, options?: any) {
            return CashFlowApiFp(configuration).updateCashRecord(cashRecord, options)(fetch, basePath);
        },
    };
};

/**
 * CashFlowApi - object-oriented interface
 * @export
 * @class CashFlowApi
 * @extends {BaseAPI}
 */
export class CashFlowApi extends BaseAPI {
    /**
     * 
     * @summary 查询指定年月的资金明细汇总
     * @param {CashMonthQueryVo} cashMonthQueryVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public cashDateDetail(cashMonthQueryVo: CashMonthQueryVo, options?: any) {
        return CashFlowApiFp(this.configuration).cashDateDetail(cashMonthQueryVo, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 查询年月的资金明细汇总列表
     * @param {CashMonthQueryVo} cashMonthQueryVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public cashDateList(cashMonthQueryVo: CashMonthQueryVo, options?: any) {
        return CashFlowApiFp(this.configuration).cashDateList(cashMonthQueryVo, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 企业账本参数列表查看
     * @param {number} paramType 参数类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public cashParamList(paramType: number, options?: any) {
        return CashFlowApiFp(this.configuration).cashParamList(paramType, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 资金明细列表
     * @param {CashRecordQueryVo} cashRecordQueryVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public cashRecordList(cashRecordQueryVo: CashRecordQueryVo, options?: any) {
        return CashFlowApiFp(this.configuration).cashRecordList(cashRecordQueryVo, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 资金明细列表导出
     * @param {CashRecordQueryVo} cashRecordQueryVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public cashRecordListExport(cashRecordQueryVo: CashRecordQueryVo, options?: any) {
        return CashFlowApiFp(this.configuration).cashRecordListExport(cashRecordQueryVo, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 企业账本自定义单元、分类新增
     * @param {CashParam} cashParam 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public createCashParam(cashParam: CashParam, options?: any) {
        return CashFlowApiFp(this.configuration).createCashParam(cashParam, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 资金明细添加
     * @param {CashRecord} cashRecord 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public createCashRecord(cashRecord: CashRecord, options?: any) {
        return CashFlowApiFp(this.configuration).createCashRecord(cashRecord, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 保存账户，如果Id不传为新增；Id传了则根据Id进行更新操作
     * @param {number} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public deleteCashAccount(accountId: number, options?: any) {
        return CashFlowApiFp(this.configuration).deleteCashAccount(accountId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 企业账本自定义单元、分类新增
     * @param {CashParam} cashParam 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public deleteCashParam(cashParam: CashParam, options?: any) {
        return CashFlowApiFp(this.configuration).deleteCashParam(cashParam, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 资金明细删除
     * @param {CashRecord} cashRecord 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public deleteCashRecord(cashRecord: CashRecord, options?: any) {
        return CashFlowApiFp(this.configuration).deleteCashRecord(cashRecord, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 下载流水导入模版
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public downloadCashTemplate(options?: any) {
        return CashFlowApiFp(this.configuration).downloadCashTemplate(options)(this.fetch, this.basePath);
    }

    /**
     * 导入流水
     * @summary 导入流水
     * @param {any} excelFile import cash records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public importCashRecords(excelFile: any, options?: any) {
        return CashFlowApiFp(this.configuration).importCashRecords(excelFile, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 查询某个账户的详情以及部分流水
     * @param {number} accountId 账户Id
     * @param {number} [pageSize] 每页的账户流水条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public queryAccountDetail(accountId: number, pageSize?: number, options?: any) {
        return CashFlowApiFp(this.configuration).queryAccountDetail(accountId, pageSize, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 查询所有账户的详情，用于资产管家首页
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public queryAllAccountsDetail(options?: any) {
        return CashFlowApiFp(this.configuration).queryAllAccountsDetail(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 分页查询某个账户的部分流水，根据入参里的lastRecord.seqId进行查询
     * @param {number} accountId 账户Id
     * @param {AssetsAccountDailyFlowQueryVo} assetsAccountDailyFlowQueryVo 分页查询的参数，当查询下一页的时候，需要把上一次请求的最后一条流水上传
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public queryCashFlow(accountId: number, assetsAccountDailyFlowQueryVo: AssetsAccountDailyFlowQueryVo, options?: any) {
        return CashFlowApiFp(this.configuration).queryCashFlow(accountId, assetsAccountDailyFlowQueryVo, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 保存账户，如果Id不传为新增；Id传了则根据Id进行更新操作
     * @param {CashAccountVo} cashAccountVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public saveCashAccount(cashAccountVo: CashAccountVo, options?: any) {
        return CashFlowApiFp(this.configuration).saveCashAccount(cashAccountVo, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 分类打星标
     * @param {CashParam} cashParam 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public tagStarTarget(cashParam: CashParam, options?: any) {
        return CashFlowApiFp(this.configuration).tagStarTarget(cashParam, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 更新企业资产账户余额
     * @param {CashAccountVo} cashAccountVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public updateCashAccountBalance(cashAccountVo: CashAccountVo, options?: any) {
        return CashFlowApiFp(this.configuration).updateCashAccountBalance(cashAccountVo, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 企业账本自定义单元、分类新增
     * @param {CashParam} cashParam 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public updateCashParam(cashParam: CashParam, options?: any) {
        return CashFlowApiFp(this.configuration).updateCashParam(cashParam, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 资金明细修改
     * @param {CashRecord} cashRecord 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApi
     */
    public updateCashRecord(cashRecord: CashRecord, options?: any) {
        return CashFlowApiFp(this.configuration).updateCashRecord(cashRecord, options)(this.fetch, this.basePath);
    }

}

